/****************************************************************************
 * Copyright (C) 2012 ecsec GmbH.
 * All rights reserved.
 * Contact: ecsec GmbH (info@ecsec.de)
 *
 * This file is part of the Open eCard App.
 *
 * GNU General Public License Usage
 * This file may be used under the terms of the GNU General Public
 * License version 3.0 as published by the Free Software Foundation
 * and appearing in the file LICENSE.GPL included in the packaging of
 * this file. Please review the following information to ensure the
 * GNU General Public License version 3.0 requirements will be met:
 * http://www.gnu.org/copyleft/gpl.html.
 *
 * Other Usage
 * Alternatively, this file may be used in accordance with the terms
 * and conditions contained in a signed written agreement between
 * you and ecsec GmbH.
 *
 ***************************************************************************/

package org.openecard.crypto.common.asn1.cvc;

import java.security.cert.CertificateException;
import org.openecard.common.util.StringUtils;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;
import static org.testng.Assert.*;


/**
 *
 * @author Moritz Horsch <horsch@cdc.informatik.tu-darmstadt.de>
 */
public class CardVerifiableCertificateVerify {

    private CardVerifiableCertificate certificate;
    private CertificateDescription certificateDescription;
    private CertificateDescription certificateDescriptionMalformed;

    @BeforeTest
    public void init() {
	try {
	    byte[] cert = StringUtils.toByteArray("7F218201447F4E81FD5F290100420F444544567449446D744730303030397F494F060A04007F0007020202020386410429DE2CA270B7F1CD4A121D182F84E1B01F123D021699B427C81D8E02DD7D0D7A6FBF8F9882F3DD12916A41F320831A0E9C4AF76A42CE98F0ECAE8EBB341292A55F200C444541546D744730303030347F4C12060904007F0007030102025305000501FB075F25060102000700045F2406010201000001655E732D060904007F00070301030180203D481284343970B32B336BF6F9316AC990342D275D273CBE3855C1C08F12CECC732D060904007F0007030103028020E0BFAAA425C6673920F25F40C8DCE16086FC9C37F723D6198CFBDFA98FDA2F0C5F374082F5C7985B73C4A46976EB3CC4BC07C6377090FDAB9134BC329A5BA97665EE23564632A9C529009437975A40205E8D5DEF6C0F0621006F0C6C6D404E46ED7616");
	    certificate = new CardVerifiableCertificate(cert);

	    byte[] bytesA = StringUtils.toByteArray
	    certificateDescription = CertificateDescription.getInstance(bytesA);

	    byte[] bytesB = StringUtils.toByteArray
	    certificateDescriptionMalformed = CertificateDescription.getInstance(bytesB);
	} catch (Exception e) {
	    fail(e.getMessage());
	}
    }

    @Test(enabled = true)
    public void testVerifyCertificateDescription() throws Exception {
	CardVerifiableCertificateVerifier.verify(certificate, certificateDescription);
    }

    @Test(enabled = true, expectedExceptions = CertificateException.class)
    public void testVerifyCertificateDescription2() throws Exception {
	CardVerifiableCertificateVerifier.verify(certificate, certificateDescriptionMalformed);
    }

}
